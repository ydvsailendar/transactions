name: Docker Build and Push

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  POSTGRES_DB: transactions_db
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version and increment patch
        id: get_version
        run: |
          # Get base version from package.json
          PKG_VERSION=$(node -p "require('./package.json').version")

          # Extract major and minor version
          MAJOR_MINOR=$(echo $PKG_VERSION | cut -d. -f1,2)

          # Get latest git tag
          LATEST_TAG=$(git tag -l "v${MAJOR_MINOR}.*" | sort -V | tail -n 1)

          if [ -z "$LATEST_TAG" ]; then
            PATCH=0
          else
            CURRENT_PATCH=$(echo $LATEST_TAG | cut -d. -f3)
            PATCH=$((CURRENT_PATCH + 1))
          fi

          # Set new version
          NEW_VERSION="${MAJOR_MINOR}.${PATCH}"
          echo "VERSION=${NEW_VERSION}" >> $GITHUB_ENV

          # Create and push new tag
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

      - name: Get release version
        id: release_version
        run: |
          # Check if this is a release build and get the release version
          if [[ "${GITHUB_EVENT_NAME}" == "release" && "${GITHUB_EVENT_ACTION}" == "published" ]]; then
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=${{ env.VERSION }}" >> $GITHUB_ENV
          fi

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/db
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=${{ env.RELEASE_VERSION }}
            type=raw,value=latest
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Build and push Docker images
        uses: docker/bake-action@v6
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          push: true
          targets: transactions
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          DB_HOST: db
          DB_USER: ${{ env.POSTGRES_USER }}
          DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          DB_NAME: ${{ env.POSTGRES_DB }}
          DB_PORT: 5432
          API_URL: http://localhost:3000
          DOCKER_BUILDKIT: 1
          BUILDX_NO_DEFAULT_LOAD: 1
          BUILDKIT_PROGRESS: plain
